<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä Dashboard - Dijital Tabela</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        /* Header */
        .header {
            background: rgba(255,255,255,0.95);
            padding: 25px 35px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
        }
        
        .header-left {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .logo {
            font-size: 2.5em;
        }
        
        .header-info h1 {
            margin: 0;
            color: #333;
            font-size: 28px;
        }
        
        .header-info .subtitle {
            color: #666;
            font-size: 14px;
            margin-top: 5px;
        }
        
        .header-right {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .user-info {
            text-align: right;
            margin-right: 15px;
        }
        
        .user-name {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }
        
        .user-role {
            color: #666;
            font-size: 12px;
        }
        
        /* Stats Cards */
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 15px 35px rgba(67, 233, 123, 0.3);
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(67, 233, 123, 0.4);
        }
        
        .stat-card:nth-child(2) {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
        }
        
        .stat-card:nth-child(3) {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            box-shadow: 0 15px 35px rgba(245, 87, 108, 0.3);
        }
        
        .stat-card:nth-child(4) {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            box-shadow: 0 15px 35px rgba(79, 172, 254, 0.3);
        }
        
        .stat-icon {
            font-size: 3em;
            margin-bottom: 15px;
            opacity: 0.9;
        }
        
        .stat-number {
            font-size: 3em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .stat-label {
            font-size: 16px;
            opacity: 0.9;
        }
        
        /* Quick Actions */
        .section {
            background: rgba(255,255,255,0.95);
            padding: 35px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }
        
        .section-title {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 25px;
            font-size: 24px;
            color: #333;
        }
        
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }
        
        .action-card {
            background: white;
            border: 2px solid #f0f2f5;
            border-radius: 15px;
            padding: 25px;
            transition: all 0.3s;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        
        .action-card:hover {
            border-color: #667eea;
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.2);
        }
        
        .action-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
        }
        
        .action-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }
        
        .action-description {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
        }
        
        /* Recent Screens */
        .screens-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .screen-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: all 0.3s;
            border-left: 5px solid #ddd;
            cursor: pointer;
        }
        
        .screen-card.online {
            border-left-color: #27ae60;
        }
        
        .screen-card.offline {
            border-left-color: #e74c3c;
        }
        
        .screen-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        
        .screen-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .screen-status {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .status-online {
            background: #d4edda;
            color: #155724;
        }
        
        .status-offline {
            background: #f8d7da;
            color: #721c24;
        }
        
        /* Buttons */
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }
        
        .btn-success { background: linear-gradient(135deg, #27ae60, #2ecc71); }
        .btn-danger { background: linear-gradient(135deg, #e74c3c, #c0392b); }
        .btn-warning { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .btn-info { background: linear-gradient(135deg, #3498db, #2980b9); }
        
        /* Notifications */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            display: none;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .notification.success { background: #27ae60; }
        .notification.error { background: #e74c3c; }
        .notification.info { background: #3498db; }
        
        /* Responsive */
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }
            
            .stats {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
            
            .quick-actions {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <div class="logo">üìä</div>
                <div class="header-info">
                    <h1>Dashboard</h1>
                    <div class="subtitle">Dijital Tabela Y√∂netim Merkezi</div>
                </div>
            </div>
            
            <div class="header-right">
                <div class="user-info">
                    <div class="user-name" id="userName">Admin</div>
                    <div class="user-role">Sistem Y√∂neticisi</div>
                </div>
                
                <button class="btn" onclick="window.location.href='screens.html'">üñ•Ô∏è Ekran Y√∂netimi</button>
                <button class="btn btn-danger" onclick="logout()">üö™ √áƒ±kƒ±≈ü</button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats">
            <div class="stat-card">
                <div class="stat-icon">üñ•Ô∏è</div>
                <div class="stat-number" id="totalScreens">0</div>
                <div class="stat-label">Toplam Ekran</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üü¢</div>
                <div class="stat-number" id="onlineScreens">0</div>
                <div class="stat-label">Aktif Ekran</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üë•</div>
                <div class="stat-number" id="totalGroups">0</div>
                <div class="stat-label">Grup Sayƒ±sƒ±</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">üìÅ</div>
                <div class="stat-number" id="totalContent">0</div>
                <div class="stat-label">ƒ∞√ßerik Sayƒ±sƒ±</div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="section">
            <div class="section-title">
                <span>‚ö°</span>
                <span>Hƒ±zlƒ± ƒ∞≈ülemler</span>
            </div>
            
            <div class="quick-actions">
                <div class="action-card" onclick="openTestDisplay()">
                    <div class="action-icon">üß™</div>
                    <div class="action-title">Test Ekranƒ± A√ß</div>
                    <div class="action-description">Yeni bir test ekranƒ± a√ßarak sistemi deneyin</div>
                </div>
                
                <div class="action-card" onclick="window.location.href='screens.html'">
                    <div class="action-icon">üñ•Ô∏è</div>
                    <div class="action-title">Ekran Y√∂netimi</div>
                    <div class="action-description">T√ºm ekranlarƒ± g√∂r√ºnt√ºleyin ve y√∂netin</div>
                </div>
                
                <div class="action-card" onclick="uploadContent()">
                    <div class="action-icon">üì§</div>
                    <div class="action-title">ƒ∞√ßerik Y√ºkle</div>
                    <div class="action-description">Yeni fotoƒüraf veya video y√ºkleyin</div>
                </div>
                
                <div class="action-card" onclick="openAllOnlineScreens()">
                    <div class="action-icon">üì∫</div>
                    <div class="action-title">T√ºm Ekranlarƒ± A√ß</div>
                    <div class="action-description">Aktif olan t√ºm ekranlarƒ± g√∂r√ºnt√ºleyin</div>
                </div>
                
                <div class="action-card" onclick="refreshAllScreens()">
                    <div class="action-icon">üîÑ</div>
                    <div class="action-title">Sistemi Yenile</div>
                    <div class="action-description">T√ºm ekranlarƒ± yenileme komutu g√∂nderin</div>
                </div>
                
                <div class="action-card" onclick="downloadSystemReport()">
                    <div class="action-icon">üìä</div>
                    <div class="action-title">Sistem Raporu</div>
                    <div class="action-description">Detaylƒ± sistem raporunu indirin</div>
                </div>
            </div>
        </div>

        <!-- Recent Screens -->
        <div class="section">
            <div class="section-title">
                <span>üñ•Ô∏è</span>
                <span>Son Ekranlar</span>
            </div>
            
            <div class="screens-grid" id="dashboardScreensGrid">
                <!-- Ekranlar buraya y√ºklenecek -->
            </div>
        </div>
    </div>

    <!-- File input for content upload -->
    <input type="file" id="fileInput" multiple accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" style="display: none;">

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <script>
        // Global deƒüi≈ükenler
        let currentUser = null;
        let screens = [];
        let groups = [];
        let uploadedFiles = [];

        // Sayfa y√ºklendiƒüinde
        window.addEventListener('load', () => {
            initializeDashboard();
        });

        // Dashboard ba≈ülatma
        function initializeDashboard() {
            // Oturum kontrol√º
            checkSession();
            
            // Sistem verilerini y√ºkle
            loadSystemData();
            
            // Dashboard'u g√ºncelle
            updateDashboard();
            
            // File input event listener
            setupFileInput();
            
            console.log('üìä Dashboard y√ºklendi');
        }

        // Oturum kontrol√º
        function checkSession() {
            const session = localStorage.getItem('admin_session');
            if (!session) {
                window.location.href = 'index.html';
                return;
            }
            
            currentUser = JSON.parse(session);
            document.getElementById('userName').textContent = currentUser.username;
        }

        // Sistem verilerini y√ºkle
        function loadSystemData() {
            screens = JSON.parse(localStorage.getItem('digital_screens') || '[]');
            groups = JSON.parse(localStorage.getItem('screen_groups') || '[]');
            uploadedFiles = JSON.parse(localStorage.getItem('uploadedFiles') || '[]');
            
            // Varsayƒ±lan veriler olu≈ütur
            if (screens.length === 0 && groups.length === 0) {
                createSampleData();
            }
        }

        // √ñrnek veri olu≈ütur
        function createSampleData() {
            // √ñrnek gruplar
            groups = [
                {
                    id: 'group1',
                    name: 'ƒ∞stanbul Maƒüazalarƒ±',
                    color: '#27ae60',
                    description: 'ƒ∞stanbul b√∂lgesindeki t√ºm maƒüazalar',
                    created: new Date().toISOString()
                },
                {
                    id: 'group2',
                    name: 'Ankara Maƒüazalarƒ±',
                    color: '#3498db',
                    description: 'Ankara b√∂lgesindeki maƒüazalar',
                    created: new Date().toISOString()
                }
            ];

            // √ñrnek ekranlar
            screens = [
                {
                    id: 'screen1',
                    name: 'Kadƒ±k√∂y Maƒüaza - Giri≈ü',
                    location: 'ƒ∞stanbul - Kadƒ±k√∂y',
                    groupId: 'group1',
                    status: 'online',
                    lastSeen: new Date().toISOString(),
                    description: 'Ana giri≈ü kapƒ±sƒ±ndaki ho≈ügeldin ekranƒ±',
                    created: new Date().toISOString()
                },
                {
                    id: 'screen2',
                    name: 'Kadƒ±k√∂y Maƒüaza - Kasa',
                    location: 'ƒ∞stanbul - Kadƒ±k√∂y',
                    groupId: 'group1',
                    status: 'online',
                    lastSeen: new Date().toISOString(),
                    description: 'Kasa yanƒ±ndaki promosyon ekranƒ±',
                    created: new Date().toISOString()
                }
            ];

            saveSystemData();
            addActivity('Sistem ba≈ülatƒ±ldƒ± ve √∂rnek veriler olu≈üturuldu');
        }

        // Veriyi kaydet
        function saveSystemData() {
            localStorage.setItem('digital_screens', JSON.stringify(screens));
            localStorage.setItem('screen_groups', JSON.stringify(groups));
            localStorage.setItem('uploadedFiles', JSON.stringify(uploadedFiles));
        }

        // Dashboard g√ºncelle
        function updateDashboard() {
            document.getElementById('totalScreens').textContent = screens.length;
            document.getElementById('onlineScreens').textContent = screens.filter(s => s.status === 'online').length;
            document.getElementById('totalGroups').textContent = groups.length;
            document.getElementById('totalContent').textContent = uploadedFiles.length;

            loadDashboardScreens();
        }

        // Dashboard ekran listesi
        function loadDashboardScreens() {
            const container = document.getElementById('dashboardScreensGrid');
            
            if (screens.length === 0) {
                container.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #666;">
                        <div style="font-size: 3em; margin-bottom: 15px;">üñ•Ô∏è</div>
                        <p>Hen√ºz ekran eklenmemi≈ü</p>
                        <button class="btn" onclick="openTestDisplay()" style="margin-top: 15px;">üß™ ƒ∞lk Test Ekranƒ±nƒ± A√ß</button>
                    </div>
                `;
                return;
            }

            // Son 6 ekranƒ± g√∂ster
            const recentScreens = screens.slice(-6);
            
            container.innerHTML = recentScreens.map(screen => {
                const group = groups.find(g => g.id === screen.groupId);
                const timeDiff = Date.now() - new Date(screen.lastSeen).getTime();
                const minutesAgo = Math.floor(timeDiff / 60000);
                
                return `
                    <div class="screen-card ${screen.status}" onclick="openScreenControl('${screen.id}')">
                        <div class="screen-header">
                            <h4>${screen.name}</h4>
                            <span class="screen-status status-${screen.status}">
                                ${screen.status === 'online' ? 'üü¢ Aktif' : 'üî¥ √áevrimdƒ±≈üƒ±'}
                            </span>
                        </div>
                        
                        <div style="color: #666; font-size: 14px; margin-bottom: 10px;">
                            üìç ${screen.location}
                        </div>
                        
                        ${group ? `<div style="color: #666; font-size: 14px; margin-bottom: 10px;">
                            üë• ${group.name}
                        </div>` : ''}
                        
                        <div style="color: #666; font-size: 12px;">
                            Son g√∂r√ºlme: ${minutesAgo < 1 ? '≈ûimdi' : minutesAgo + ' dk √∂nce'}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Hƒ±zlƒ± i≈ülemler
        function openTestDisplay() {
            const displayUrl = `display.html`;
            const testWindow = window.open(displayUrl, 'test_display', 'width=1200,height=800');
            
            if (testWindow) {
                addActivity('Test ekranƒ± a√ßƒ±ldƒ±');
                showNotification('üß™ Test ekranƒ± a√ßƒ±ldƒ±!', 'success');
            } else {
                showNotification('‚ö†Ô∏è Pop-up engelleyici aktif!', 'error');
            }
        }

        function uploadContent() {
            document.getElementById('fileInput').click();
        }

        function setupFileInput() {
            document.getElementById('fileInput').addEventListener('change', async function(e) {
                const files = Array.from(e.target.files);
                
                for (let file of files) {
                    await uploadFile(file);
                }
                
                e.target.value = ''; // Reset input
                updateDashboard();
            });
        }

        async function uploadFile(file) {
            if (file.size > 10 * 1024 * 1024) {
                showNotification('‚ö†Ô∏è Dosya √ßok b√ºy√ºk! Maksimum 10MB', 'error');
                return;
            }
            
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/quicktime'];
            if (!allowedTypes.includes(file.type)) {
                showNotification('‚ö†Ô∏è Desteklenmeyen dosya t√ºr√º!', 'error');
                return;
            }
            
            try {
                const base64Data = await fileToBase64(file);
                
                const fileInfo = {
                    name: file.name,
                    type: file.type.startsWith('image/') ? 'image' : 'video',
                    size: file.size,
                    data: base64Data,
                    uploadDate: new Date().toISOString(),
                    uploadedBy: currentUser.username
                };
                
                uploadedFiles.push(fileInfo);
                saveSystemData();
                
                showNotification(`‚úÖ ${file.name} y√ºklendi!`, 'success');
                addActivity(`ƒ∞√ßerik y√ºklendi: ${file.name}`);
                
            } catch (error) {
                showNotification('‚ùå Y√ºkleme hatasƒ±!', 'error');
            }
        }

        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        function openAllOnlineScreens() {
            const onlineScreens = screens.filter(s => s.status === 'online');
            
            if (onlineScreens.length === 0) {
                showNotification('‚ö†Ô∏è Aktif ekran bulunmuyor!', 'error');
                return;
            }
            
            if (confirm(`${onlineScreens.length} aktif ekranƒ± a√ßmak istediƒüinizden emin misiniz?`)) {
                onlineScreens.forEach((screen, index) => {
                    setTimeout(() => {
                        const displayUrl = `display.html?id=${screen.id}`;
                        window.open(displayUrl, `display_${screen.id}`, 'width=800,height=600');
                    }, index * 300);
                });
                
                addActivity(`T√ºm aktif ekranlar a√ßƒ±ldƒ± (${onlineScreens.length} ekran)`);
                showNotification(`üì∫ ${onlineScreens.length} aktif ekran a√ßƒ±ldƒ±!`, 'success');
            }
        }

        function refreshAllScreens() {
            localStorage.setItem('refresh_all_screens', Date.now());
            addActivity('T√ºm ekranlar yenileme komutu aldƒ±');
            showNotification('üîÑ T√ºm ekranlar yenileniyor...', 'info');
        }

        function downloadSystemReport() {
            const report = {
                timestamp: new Date().toISOString(),
                totalScreens: screens.length,
                onlineScreens: screens.filter(s => s.status === 'online').length,
                totalGroups: groups.length,
                totalContent: uploadedFiles.length,
                screens: screens,
                groups: groups
            };
            
            const dataStr = JSON.stringify(report, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `dijital-tabela-rapor-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            URL.revokeObjectURL(url);
            
            addActivity('Sistem raporu indirildi');
            showNotification('üìä Sistem raporu indirildi!', 'success');
        }

        function openScreenControl(screenId) {
            const screen = screens.find(s => s.id === screenId);
            if (screen) {
                const controlUrl = `control.html?id=${screenId}`;
                window.open(controlUrl, `control_${screenId}`, 'width=1400,height=900');
                
                addActivity(`Ekran kontrol√º a√ßƒ±ldƒ±: ${screen.name}`);
            }
        }

        // Aktivite ekleme
        function addActivity(message) {
            const activities = JSON.parse(localStorage.getItem('system_activities') || '[]');
            activities.push({
                id: Date.now(),
                message: message,
                time: new Date().toISOString()
            });
            
            if (activities.length > 50) {
                activities.splice(0, activities.length - 50);
            }
            
            localStorage.setItem('system_activities', JSON.stringify(activities));
        }

        // √áƒ±kƒ±≈ü yap
        function logout() {
            if (confirm('√áƒ±kƒ±≈ü yapmak istediƒüinizden emin misiniz?')) {
                localStorage.removeItem('admin_session');
                window.location.href = 'index.html';
            }
        }

        // Bildirim g√∂ster
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => notification.style.display = 'none', 3000);
        }

        // Console bilgileri
        console.log('üìä Dashboard Sistemi v2.0');
        console.log('üéÆ Hƒ±zlƒ± i≈ülemler aktif');
    </script>
</body>
</html>
