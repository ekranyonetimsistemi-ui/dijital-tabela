<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üì∫ Ekran Kontrol√º</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            background: rgba(255,255,255,0.95);
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 30px;
        }
        
        .left-panel {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }
        
        .right-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .section {
            background: rgba(255,255,255,0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        /* Canlƒ± √ñnizleme */
        .live-preview {
            height: 400px;
            background: #000;
            border-radius: 15px;
            position: relative;
            overflow: hidden;
            border: 3px solid #27ae60;
        }
        
        .preview-content {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2em;
        }
        
        .preview-content img,
        .preview-content video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        
        .preview-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
        }
        
        /* ƒ∞√ßerik Listesi */
        .content-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .content-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: all 0.3s;
            cursor: pointer;
            border: 2px solid transparent;
        }
        
        .content-card:hover {
            transform: translateY(-5px);
            border-color: #667eea;
        }
        
        .content-card.assigned {
            border-color: #27ae60;
            background: #f0fff4;
        }
        
        .content-thumbnail {
            width: 100%;
            height: 100px;
            background: #f0f2f5;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            overflow: hidden;
        }
        
        .content-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .content-info {
            padding: 10px;
            font-size: 12px;
        }
        
        /* Ekran Bilgi Kartƒ± */
        .screen-info-card {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(255,255,255,0.2);
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
        }
        
        /* Atanmƒ±≈ü ƒ∞√ßerikler */
        .assigned-content {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .assigned-item {
            display: flex;
            align-items: center;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 8px;
            gap: 15px;
        }
        
        .assigned-thumbnail {
            width: 50px;
            height: 50px;
            background: #e9ecef;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .assigned-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        /* Butonlar */
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }
        
        .btn-success { background: linear-gradient(135deg, #27ae60, #2ecc71); }
        .btn-danger { background: linear-gradient(135deg, #e74c3c, #c0392b); }
        .btn-warning { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .btn-info { background: linear-gradient(135deg, #3498db, #2980b9); }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
        }
        
        /* ƒ∞statistikler */
        .stats-mini {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 20px;
        }
        
        .stat-mini {
            background: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .stat-mini-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #667eea;
        }
        
        /* Bildirimler */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            display: none;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .notification.success { background: #27ae60; }
        .notification.error { background: #e74c3c; }
        .notification.info { background: #3498db; }
        
        /* Responsive */
        @media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .right-panel {
                order: -1;
            }
        }
        
        @media (max-width: 768px) {
            .content-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
            
            .live-preview {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div>
                <h1 id="screenTitle">üì∫ Ekran Kontrol√º</h1>
                <p style="color: #666;" id="screenSubtitle">Ekran y√ºkleniyor...</p>
            </div>
            <div>
                <button class="btn btn-info" onclick="openDisplayScreen()">üëÅÔ∏è Canlƒ± G√∂r√ºnt√ºle</button>
                <button class="btn btn-warning" onclick="refreshScreen()">üîÑ Yenile</button>
                <button class="btn" onclick="window.close()">‚óÄÔ∏è Geri D√∂n</button>
            </div>
        </div>

        <div class="main-content">
            <!-- Sol Panel - Canlƒ± √ñnizleme ve ƒ∞√ßerik K√ºt√ºphanesi -->
            <div class="left-panel">
                <!-- Canlƒ± √ñnizleme -->
                <div class="section">
                    <h3 style="margin-bottom: 20px;">üì∫ Canlƒ± √ñnizleme</h3>
                    <div class="live-preview" id="livePreview">
                        <div class="preview-content" id="previewContent">
                            <div style="text-align: center;">
                                <div style="font-size: 3em; margin-bottom: 15px;">üì∫</div>
                                <div>√ñnizleme y√ºkleniyor...</div>
                            </div>
                        </div>
                        <div class="preview-overlay" id="previewOverlay">Baƒülanƒ±yor...</div>
                    </div>
                    
                    <div style="display: flex; gap: 10px; margin-top: 15px; justify-content: center;">
                        <button class="btn btn-small" onclick="prevContent()">‚óÄÔ∏è √ñnceki</button>
                        <button class="btn btn-small" onclick="nextContent()">‚ñ∂Ô∏è Sonraki</button>
                        <button class="btn btn-small btn-warning" onclick="stopPreview()">‚èπÔ∏è Durdur</button>
                    </div>
                </div>

                <!-- ƒ∞√ßerik K√ºt√ºphanesi -->
                <div class="section">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3>üìÅ ƒ∞√ßerik K√ºt√ºphanesi</h3>
                        <button class="btn btn-small btn-success" onclick="assignSelectedContent()">‚úÖ Se√ßilenleri Ata</button>
                    </div>
                    
                    <div class="content-grid" id="contentLibrary">
                        <!-- ƒ∞√ßerikler buraya y√ºklenecek -->
                    </div>
                </div>
            </div>

            <!-- Saƒü Panel - Ekran Bilgileri ve Kontroller -->
            <div class="right-panel">
                <!-- Ekran Bilgi Kartƒ± -->
                <div class="screen-info-card">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px;">
                        <div>
                            <h3 id="screenName">Ekran Adƒ±</h3>
                            <p id="screenLocation" style="opacity: 0.9; margin: 5px 0;">Konum</p>
                            <p id="screenGroup" style="opacity: 0.8; font-size: 14px;">Grup</p>
                        </div>
                        <div class="status-indicator" id="screenStatus">
                            <span>üî¥</span> √áevrimdƒ±≈üƒ±
                        </div>
                    </div>
                    
                    <div style="font-size: 14px; opacity: 0.9;">
                        <div>üìÖ Son g√∂r√ºlme: <span id="lastSeen">-</span></div>
                        <div>üÜî Ekran ID: <span id="screenId">-</span></div>
                    </div>
                </div>

                <!-- Atanmƒ±≈ü ƒ∞√ßerikler -->
                <div class="section">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3>üéØ Atanmƒ±≈ü ƒ∞√ßerikler</h3>
                        <button class="btn btn-small btn-danger" onclick="clearAllContent()">üóëÔ∏è T√ºm√ºn√º Kaldƒ±r</button>
                    </div>
                    
                    <div class="assigned-content" id="assignedContent">
                        <!-- Atanmƒ±≈ü i√ßerikler buraya -->
                    </div>
                </div>

                <!-- ƒ∞statistikler -->
                <div class="section">
                    <h3 style="margin-bottom: 15px;">üìä ƒ∞statistikler</h3>
                    <div class="stats-mini">
                        <div class="stat-mini">
                            <div class="stat-mini-number" id="assignedCount">0</div>
                            <div style="font-size: 12px; color: #666;">Atanmƒ±≈ü ƒ∞√ßerik</div>
                        </div>
                        <div class="stat-mini">
                            <div class="stat-mini-number" id="totalDuration">0</div>
                            <div style="font-size: 12px; color: #666;">Toplam S√ºre (dk)</div>
                        </div>
                    </div>
                </div>

                <!-- Hƒ±zlƒ± ƒ∞≈ülemler -->
                <div class="section">
                    <h3 style="margin-bottom: 15px;">‚ö° Hƒ±zlƒ± ƒ∞≈ülemler</h3>
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        <button class="btn btn-success" onclick="assignRandomContent()">üé≤ Rastgele ƒ∞√ßerik Ata</button>
                        <button class="btn btn-info" onclick="copyFromGroup()">üë• Gruptan Kopyala</button>
                        <button class="btn btn-warning" onclick="scheduleContent()">‚è∞ Zamanlama Ayarla</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bildirim -->
    <div class="notification" id="notification"></div>

    <script>
        // Global deƒüi≈ükenler
        let currentScreenId = null;
        let currentScreen = null;
        let uploadedFiles = [];
        let assignments = {};
        let selectedContentIndexes = [];
        let previewInterval = null;
        let previewIndex = 0;

        // Sayfa y√ºklendiƒüinde
        window.addEventListener('load', () => {
            initializeScreenControl();
        });

        // Ekran kontrol sistemi ba≈ülatma
        function initializeScreenControl() {
            // URL parametresinden ekran ID'sini al
            const urlParams = new URLSearchParams(window.location.search);
            currentScreenId = urlParams.get('id');
            
            if (!currentScreenId) {
                showNotification('‚ùå Ge√ßersiz ekran ID\'si!', 'error');
                return;
            }

            loadSystemData();
            loadScreenData();
            loadContentLibrary();
            loadAssignedContent();
            startLivePreview();
            
            console.log('üì∫ Ekran kontrol√º ba≈ülatƒ±ldƒ±:', currentScreenId);
        }

        // Sistem verilerini y√ºkle
        function loadSystemData() {
            uploadedFiles = JSON.parse(localStorage.getItem('uploadedFiles') || '[]');
            assignments = JSON.parse(localStorage.getItem('content_assignments') || '{}');
        }

        // Ekran verilerini y√ºkle
        function loadScreenData() {
            const screens = JSON.parse(localStorage.getItem('digital_screens') || '[]');
            const groups = JSON.parse(localStorage.getItem('screen_groups') || '[]');
            
            currentScreen = screens.find(s => s.id === currentScreenId);
            
            if (!currentScreen) {
                showNotification('‚ùå Ekran bulunamadƒ±!', 'error');
                return;
            }

            // Ekran bilgilerini g√∂ster
            document.getElementById('screenTitle').textContent = `üì∫ ${currentScreen.name}`;
            document.getElementById('screenSubtitle').textContent = `${currentScreen.location} - Ekran Kontrol√º`;
            document.getElementById('screenName').textContent = currentScreen.name;
            document.getElementById('screenLocation').textContent = currentScreen.location;
            document.getElementById('screenId').textContent = currentScreen.id;
            
            const group = groups.find(g => g.id === currentScreen.groupId);
            document.getElementById('screenGroup').textContent = group ? group.name : 'Grup Yok';
            
            // Durum g√ºncelle
            const statusEl = document.getElementById('screenStatus');
            const timeDiff = Date.now() - new Date(currentScreen.lastSeen).getTime();
            const minutesAgo = Math.floor(timeDiff / 60000);
            
            if (currentScreen.status === 'online') {
                statusEl.innerHTML = '<span>üü¢</span> Aktif';
                statusEl.style.background = 'rgba(39, 174, 96, 0.3)';
            } else {
                statusEl.innerHTML = '<span>üî¥</span> √áevrimdƒ±≈üƒ±';
                statusEl.style.background = 'rgba(231, 76, 60, 0.3)';
            }
            
            document.getElementById('lastSeen').textContent = 
                minutesAgo < 1 ? '≈ûimdi' : minutesAgo + ' dakika √∂nce';
        }

        // ƒ∞√ßerik k√ºt√ºphanesini y√ºkle
        function loadContentLibrary() {
            const container = document.getElementById('contentLibrary');
            
            if (uploadedFiles.length === 0) {
                container.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #666;">
                        <div style="font-size: 3em; margin-bottom: 15px;">üìÅ</div>
                        <p>Hen√ºz i√ßerik y√ºklenmemi≈ü</p>
                    </div>
                `;
                return;
            }

            const assignedIndexes = assignments[currentScreenId] ? 
                assignments[currentScreenId].map(a => a.contentIndex) : [];

            container.innerHTML = uploadedFiles.map((file, index) => {
                const isAssigned = assignedIndexes.includes(index);
                
                return `
                    <div class="content-card ${isAssigned ? 'assigned' : ''}" 
                         onclick="toggleContentSelection(${index})" 
                         data-index="${index}">
                        <div class="content-thumbnail">
                            ${file.type === 'image' ? 
                                `<img src="${file.data}" alt="${file.name}">` : 
                                `üé•`
                            }
                        </div>
                        <div class="content-info">
                            <div style="font-weight: bold; margin-bottom: 3px;">
                                ${file.name.length > 15 ? file.name.substring(0, 15) + '...' : file.name}
                            </div>
                            <div style="color: #666;">
                                ${file.type === 'image' ? 'üñºÔ∏è Fotoƒüraf' : 'üé• Video'}
                            </div>
                            ${isAssigned ? '<div style="color: #27ae60; font-weight: bold; margin-top: 5px;">‚úÖ Atandƒ±</div>' : ''}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Atanmƒ±≈ü i√ßerikleri y√ºkle
        function loadAssignedContent() {
            const container = document.getElementById('assignedContent');
            const screenAssignments = assignments[currentScreenId] || [];
            
            if (screenAssignments.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #666;">
                        <div style="font-size: 2em; margin-bottom: 10px;">üìù</div>
                        <p>Bu ekrana hen√ºz i√ßerik atanmamƒ±≈ü</p>
                    </div>
                `;
                document.getElementById('assignedCount').textContent = '0';
                return;
            }

            container.innerHTML = screenAssignments.map((assignment, index) => {
                const file = uploadedFiles[assignment.contentIndex];
                if (!file) return '';
                
                return `
                    <div class="assigned-item">
                        <div class="assigned-thumbnail">
                            ${file.type === 'image' ? 
                                `<img src="${file.data}" alt="${file.name}">` : 
                                `üé•`
                            }
                        </div>
                        <div style="flex: 1;">
                            <div style="font-weight: bold; margin-bottom: 3px;">${file.name}</div>
                            <div style="font-size: 12px; color: #666;">
                                ${file.type === 'image' ? 'üñºÔ∏è Fotoƒüraf' : 'üé• Video'} ‚Ä¢ 
                                ${new Date(assignment.assignedAt).toLocaleDateString('tr-TR')}
                            </div>
                        </div>
                        <button class="btn btn-small btn-danger" onclick="removeAssignment(${assignment.contentIndex})">
                            üóëÔ∏è
                        </button>
                    </div>
                `;
            }).join('');

            document.getElementById('assignedCount').textContent = screenAssignments.length;
            
            // Toplam s√ºre hesapla (demo)
            const totalDuration = screenAssignments.length * 8; // Her i√ßerik 8 saniye
            document.getElementById('totalDuration').textContent = Math.ceil(totalDuration / 60);
        }

        // ƒ∞√ßerik se√ßimi toggle
        function toggleContentSelection(index) {
            const card = document.querySelector(`[data-index="${index}"]`);
            
            if (selectedContentIndexes.includes(index)) {
                selectedContentIndexes = selectedContentIndexes.filter(i => i !== index);
                card.style.border = '2px solid transparent';
            } else {
                selectedContentIndexes.push(index);
                card.style.border = '2px solid #667eea';
            }
        }

        // Se√ßili i√ßerikleri ata
        function assignSelectedContent() {
            if (selectedContentIndexes.length === 0) {
                showNotification('‚ö†Ô∏è L√ºtfen i√ßerik se√ßin!', 'error');
                return;
            }

            if (!assignments[currentScreenId]) {
                assignments[currentScreenId] = [];
            }

            selectedContentIndexes.forEach(index => {
                const file = uploadedFiles[index];
                const existingAssignment = assignments[currentScreenId].find(a => a.contentIndex === index);
                
                if (!existingAssignment) {
                    assignments[currentScreenId].push({
                        contentIndex: index,
                        contentName: file.name,
                        assignedAt: new Date().toISOString(),
                        type: 'screen'
                    });
                }
            });

            // LocalStorage'a kaydet
            localStorage.setItem('content_assignments', JSON.stringify(assignments));
            
            // Aktivite ekle
            const activities = JSON.parse(localStorage.getItem('system_activities') || '[]');
            activities.push({
                id: Date.now(),
                message: `${selectedContentIndexes.length} i√ßerik atandƒ±: ${currentScreen.name}`,
                time: new Date().toISOString()
            });
            localStorage.setItem('system_activities', JSON.stringify(activities));

            // Aray√ºz√º g√ºncelle
            loadContentLibrary();
            loadAssignedContent();
            selectedContentIndexes = [];
            
            showNotification(`‚úÖ ${selectedContentIndexes.length} i√ßerik atandƒ±!`, 'success');
        }

        // Atamayƒ± kaldƒ±r
        function removeAssignment(contentIndex) {
            if (confirm('Bu i√ßeriƒüi ekrandan kaldƒ±rmak istediƒüinizden emin misiniz?')) {
                assignments[currentScreenId] = assignments[currentScreenId].filter(a => a.contentIndex !== contentIndex);
                localStorage.setItem('content_assignments', JSON.stringify(assignments));
                
                loadContentLibrary();
                loadAssignedContent();
                
                showNotification('üóëÔ∏è ƒ∞√ßerik kaldƒ±rƒ±ldƒ±!', 'success');
            }
        }

        // T√ºm i√ßerikleri kaldƒ±r
        function clearAllContent() {
            if (confirm('Bu ekrandaki t√ºm i√ßerikleri kaldƒ±rmak istediƒüinizden emin misiniz?')) {
                assignments[currentScreenId] = [];
                localStorage.setItem('content_assignments', JSON.stringify(assignments));
                
                loadContentLibrary();
                loadAssignedContent();
                
                showNotification('üóëÔ∏è T√ºm i√ßerikler kaldƒ±rƒ±ldƒ±!', 'success');
            }
        }

        // Canlƒ± √∂nizlemeyi ba≈ülat
        function startLivePreview() {
            const screenAssignments = assignments[currentScreenId] || [];
            
            if (screenAssignments.length === 0) {
                document.getElementById('previewContent').innerHTML = `
                    <div style="text-align: center;">
                        <div style="font-size: 3em; margin-bottom: 15px;">üì∫</div>
                        <div>ƒ∞√ßerik atanmamƒ±≈ü</div>
                    </div>
                `;
                document.getElementById('previewOverlay').textContent = 'ƒ∞√ßerik Yok';
                return;
            }

            showPreviewContent(0);
            
            // Otomatik ge√ßi≈ü
            if (screenAssignments.length > 1) {
                previewInterval = setInterval(() => {
                    previewIndex = (previewIndex + 1) % screenAssignments.length;
                    showPreviewContent(previewIndex);
                }, 3000); // 3 saniyede bir ge√ßi≈ü
            }
        }

        // √ñnizleme i√ßeriƒüi g√∂ster
        function showPreviewContent(index) {
            const screenAssignments = assignments[currentScreenId] || [];
            if (index >= screenAssignments.length) return;
            
            const assignment = screenAssignments[index];
            const file = uploadedFiles[assignment.contentIndex];
            
            if (!file) return;
            
            const container = document.getElementById('previewContent');
            
            if (file.type === 'image') {
                container.innerHTML = `<img src="${file.data}" alt="${file.name}">`;
            } else {
                container.innerHTML = `
                    <video src="${file.data}" autoplay muted loop>
                        Tarayƒ±cƒ±nƒ±z video oynatmayƒ± desteklemiyor.
                    </video>
                `;
            }
            
            document.getElementById('previewOverlay').textContent = 
                `${index + 1}/${screenAssignments.length} - ${file.name}`;
            
            previewIndex = index;
        }

        // √ñnizleme kontrolleri
        function nextContent() {
            const screenAssignments = assignments[currentScreenId] || [];
            if (screenAssignments.length === 0) return;
            
            previewIndex = (previewIndex + 1) % screenAssignments.length;
            showPreviewContent(previewIndex);
        }

        function prevContent() {
            const screenAssignments = assignments[currentScreenId] || [];
            if (screenAssignments.length === 0) return;
            
            previewIndex = previewIndex === 0 ? screenAssignments.length - 1 : previewIndex - 1;
            showPreviewContent(previewIndex);
        }

        function stopPreview() {
            if (previewInterval) {
                clearInterval(previewInterval);
                previewInterval = null;
                showNotification('‚èπÔ∏è √ñnizleme durduruldu', 'info');
            }
        }

        // Hƒ±zlƒ± i≈ülemler
        function assignRandomContent() {
            if (uploadedFiles.length === 0) {
                showNotification('‚ö†Ô∏è ƒ∞√ßerik k√ºt√ºphanesi bo≈ü!', 'error');
                return;
            }
            
            const randomCount = Math.min(3, uploadedFiles.length);
            const randomIndexes = [];
            
            while (randomIndexes.length < randomCount) {
                const randomIndex = Math.floor(Math.random() * uploadedFiles.length);
                if (!randomIndexes.includes(randomIndex)) {
                    randomIndexes.push(randomIndex);
                }
            }
            
            selectedContentIndexes = randomIndexes;
            assignSelectedContent();
        }

        function copyFromGroup() {
            if (!currentScreen.groupId) {
                showNotification('‚ö†Ô∏è Bu ekran bir gruba dahil deƒüil!', 'error');
                return;
            }
            
            const groupAssignments = assignments[currentScreen.groupId] || [];
            if (groupAssignments.length === 0) {
                showNotification('‚ö†Ô∏è Grup i√ßeriƒüi bulunamadƒ±!', 'error');
                return;
            }
            
            // Grup i√ßeriklerini kopyala
            assignments[currentScreenId] = [...groupAssignments];
            localStorage.setItem('content_assignments', JSON.stringify(assignments));
            
            loadContentLibrary();
            loadAssignedContent();
            startLivePreview();
            
            showNotification('‚úÖ Grup i√ßerikleri kopyalandƒ±!', 'success');
        }

        function scheduleContent() {
            showNotification('‚è∞ Zamanlama √∂zelliƒüi yakƒ±nda...', 'info');
        }

        // Ekranƒ± yenile
        function refreshScreen() {
            loadSystemData();
            loadScreenData();
            loadContentLibrary();
            loadAssignedContent();
            startLivePreview();
            
            showNotification('üîÑ Ekran verileri yenilendi!', 'success');
        }

        // G√∂r√ºnt√ºleme ekranƒ±nƒ± a√ß
        function openDisplayScreen() {
            const displayUrl = `display.html?id=${currentScreenId}`;
            window.open(displayUrl, `display_${currentScreenId}`, 'width=1280,height=720,fullscreen=yes');
            
            showNotification('üì∫ G√∂r√ºnt√ºleme ekranƒ± a√ßƒ±ldƒ±!', 'success');
        }

        // Bildirim g√∂ster
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => notification.style.display = 'none', 3000);
        }

        // Sayfa kapatƒ±lƒ±rken temizlik
        window.addEventListener('beforeunload', () => {
            if (previewInterval) {
                clearInterval(previewInterval);
            }
        });

        // Konsol bilgileri
        console.log('üì∫ Ekran Kontrol Sistemi v1.0');
        console.log('üéÆ Kontroller:');
        console.log('  ‚Ä¢ ƒ∞√ßerik kartlarƒ±na tƒ±klayarak se√ß/deselect');
        console.log('  ‚Ä¢ Se√ßili i√ßerikleri "Se√ßilenleri Ata" ile ata');
        console.log('  ‚Ä¢ √ñnizleme kontrollerini kullan');
    </script>
</body>
</html>
